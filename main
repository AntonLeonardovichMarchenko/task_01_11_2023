import TheGame as game

def firstCardsDistribute(cardsDesk, playersList):
    # раздача
    # по 6 карт (из тасованной колоды) игроку в руки


    # колода ДО раздачи ==================================================
    print('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
    print(cardsDesk[0])
    print(repr(cardsDesk[0]))
    print('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')


    for player in playersList:
        i = 0
        while i < 6:
            player.addCard(cardsDesk.pop(0))
            i += 1

    # колода ПОСЛЕ раздачи ==================================================
    print('========== card.typeTheCard() after distribution ===============')

    for cd in cardsDesk:
        print(cd)
        print(repr(cd))

    print('==============================================')

    # в результате раздачи остаётся часть колоды. Последняя карта из остатка
    # - козырная. На самом деле, не важно, какая она. Последняя, первая, ...,
    # важно, что она из остатка колоды, которая имеет фиксированную длину и у
    # козырной карты есть свой индекс ====================================

def nextCardsDistribute(cardsDesk, playersList):

    # очередная раздача
    # для добора до 6 карт (из остатка колоды) каждому игроку после очередного
    # кона игры в руки одну карту.
    # Раздайте оставшиеся карты ВСЕМ, кто в этом нуждается!
    for pIndex in range(len(playersList)):
        if len(playersList[pIndex].Deck) < 6 and len(cardsDesk) > 0:
            playersList[pIndex].addCard(cardsDesk.pop(0))

    # ********************************************************************
    # вывод строкового представления колоды, получаемого НОВЫМ
    # магическим методом для колоды карт
    # колода ПОСЛЕ раздачи ***********************************************
    print(str(cardsDesk))
    # ********************************************************************


def CardTest(nPlayers):
    table = game.Player(None, 'The table')  # стол, куда игроки подкидывают кроющему карты
    cd = game.CardDeck()

    # здесь str() и repr() работают одинаково

    print('Card Deck =====================================================')

    # Можно создать собственный итератор в Python, используя функцию iter() и
    # метод __next__(). Функция iter отработает на любом объекте, у которого
    # есть метод __iter__ или метод __getitem__. Метод __iter__ возвращает итератор.
    # Если этого метода нет, функция iter() проверяет, нет ли метода __getitem__
    # - метода, который позволяет получать элементы по индексу.
    # Если метод __getitem__ есть, элементы будут перебираться по индексу (начиная с 0).
    # Если у объекта есть метод __iter__ (который обязан возвращать итератор),
    # при переборе значений используется он.
    # Функция iter() принимает объект, содержащий метод __iter__(...) и коллекцию
    # и возвращает объект-итератор, готовый для перебора коллекции.
    # Метод __next__() возвращает следующий элемент коллекции при каждом вызове.
    # Здесь создаётся список (кортеж) карт в колоде и объект-итератор it.
    # Затем используется функця next() для получения следующего элемента списка
    # при каждом вызове. Если попытаться вызвать next() после того, как был достигнут
    # конец списка, то будет возбуждено исключение StopIteration.
    # Чтобы избежать этого, можно использовать цикл for, который автоматически
    # обрабатывает исключение StopIteration:

    print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
    # собственный итератор! Через объект cd он привязан к методу __iter__
    # класса CardDeck и for обеспечивает перебор элементов коллекции
    # методом __next__. какой такой коллекции - прописано непосредственно в
    # методе __next__.
    print('****************************************')

    for it in cd:            # снаряжение собственного итератора
        try:                 # запуск итератора собственным методом __next__
            print(it)        # вывод значений (карты из колоды магическим методом) __str__
        except IndexError:
            break

    print('****************************************')

    # Чаще всего, итератор это одноразовый (???) объект и перебрав элементы коллекции,
    # уже невозможно просто так это проделать второй раз. Скорее всего, его придётся
    # повторно инициализировать:
    # for it in cd:
    #     try:
    #         print(it)
    #     except IndexError:
    #         break
    
    print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
    # А это стандартный (встроенный) итератор. Без всякого волшебства.
    for value in cd.Deck:
        print(value)
    print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')

    # это сравнение работы __repr__ и __str__
    print(repr(cd.Deck))
    print('&&&&&&&&&&&&&&&&&&&&&')
    print(str(cd.Deck))

    # растасовка колоды ==================================================
    cd.mixCards()
    print('Start Mixed Card Deck =========================================')

    # примеры и различия в применении __str__ и __repr__ в различных
    # вариантах индексации
    print((cd.Deck)[0:5])
    print(str(cd.Deck)[0:5])
    print(repr(cd.Deck)[0:5])

    print((cd.Deck[0:5]))
    print(str(cd.Deck[0:5]))
    print(repr(cd.Deck[0:5]))

    print(repr(cd.Deck[:]))   # здесь можно не продолжать. Всё и так видно

    print('Stop Mixed Card Deck ==========================================')

    # список игроков =====================================================
    playersList = list()
    for p in range(nPlayers):
        playersList.append(game.Player(p, 'Player'+str(p)))

    # раздача карт из тасованной колоды игрокам ==========================
    firstCardsDistribute(cd.Deck, playersList)

    print('players =======================================================')
    game.Player.typePlayers(playersList)

    print('the rest ======================================================')
    # в колоде - остаток с козырной картой, который и распечатывается

    print(str(cd.Deck))

    #  последняя карта остатка - козырная. Информация об этой карте
    #  сразу идёт на стол
    table.TrumpCard = cd.Deck.pop()

    print(f'the Trump ============================')
    print(str(table.TrumpCard))   # вот она
    print(f'======================================')

    print('the rest whithout the Trump ====================================')
    print(str(cd.Deck))       # остаток без козыря

    # print('========== playersList[0].typePlayer() ==========')
    # playersList[0].typePlayer()
    # print('=================================================')

    # игра по кругу. Каждый игрок отбивается (покрывает) по очереди.
    # Игрок, который отбивается - это bater

    indexOfbater = 0
    indexOfPlayer = 0

    game.Game.playGame(cd, playersList, indexOfPlayer, indexOfbater, table)


def play():
    CardTest(4)

def main():
    play()

if __name__ == '__main__':
    main()
